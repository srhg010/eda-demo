"""
This type stub file was generated by pyright.
"""

import pathlib
from collections.abc import Hashable, Sequence
from typing import Any, Callable, Literal, TypeAlias, TypeVar, Union
from . import path
from ._enums import CapStyle, JoinStyle
from .artist import Artist
from .backend_bases import RendererBase
from .markers import MarkerStyle
from .transforms import Bbox, Transform

"""
Typing support for Matplotlib

This module contains Type aliases which are useful for Matplotlib and potentially
downstream libraries.

.. admonition:: Provisional status of typing

    The ``typing`` module and type stub files are considered provisional and may change
    at any time without a deprecation period.
"""
RGBColorType: TypeAlias = tuple[float, float, float] | str
RGBAColorType: TypeAlias = (str | tuple[float, float, float, float] | tuple[RGBColorType, float] | tuple[tuple[float, float, float, float], float])
ColorType: TypeAlias = RGBColorType | RGBAColorType
RGBColourType: TypeAlias = RGBColorType
RGBAColourType: TypeAlias = RGBAColorType
ColourType: TypeAlias = ColorType
LineStyleType: TypeAlias = str | tuple[float, Sequence[float]]
DrawStyleType: TypeAlias = Literal["default", "steps", "steps-pre", "steps-mid", "steps-post"]
MarkEveryType: TypeAlias = (None | int | tuple[int, int] | slice | list[int] | float | tuple[float, float] | list[bool])
MarkerType: TypeAlias = str | path.Path | MarkerStyle
FillStyleType: TypeAlias = Literal["full", "left", "right", "bottom", "top", "none"]
JoinStyleType: TypeAlias = JoinStyle | Literal["miter", "round", "bevel"]
CapStyleType: TypeAlias = CapStyle | Literal["butt", "projecting", "round"]
CoordsBaseType = Union[str, Artist, Transform, Callable[[RendererBase], Union[Bbox, Transform]]]
CoordsType = Union[CoordsBaseType, tuple[CoordsBaseType, CoordsBaseType]]
RcStyleType: TypeAlias = (str | dict[str, Any] | pathlib.Path | Sequence[str | pathlib.Path | dict[str, Any]])
_HT = TypeVar("_HT", bound=Hashable)
HashableList: TypeAlias = list[_HT | "HashableList[_HT]"]
